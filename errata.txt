yo/generic/examples/adjacentfind.cc
Line 29, "*result" moet *result zijn

yo/generic/examples/innerproduct.cc
init van string met "\t" is eigenlijk niet nodig (lijn 46)

yo/generic/examples/inplacemerge.cc
Bugje : line 8 strcasecmp == 0 moet < 0 zijn
    bool caseString(string const &first, string const &second)
    {
        return strcasecmp(first.c_str(), second.c_str()) < 0;
    }

yo/generic/examples/ispartitioned.cc
Commentaar op einde is verkeerd, moet zijn

partitioned before: 0
first value returning 'false' when partitioning: 5
1 -2 -8 -4 -6 5 7 3 9 
partitioned after: 1

yo/generic/examples/issorteduntil.cc
Commentaar op einde is verkeerd, moet zijn

no initially sorted subrange
sorted subrange: -8 -6 -4 -2 1 

Section 19.1.31 : Moet operator< zijn 
The second prototype: one is returned if the binary predicate comp(one, two) returns false,
Misschien best vermelden dat bij prototype 3 het ook operator< is

Section 19.1.32 : 
bij de uitleg van second prototype: The element for which pred returns most often 'true'
true moet hier false zijn
Bij het prototype 5 & 6 in het lijstje staat max_element, dit moet 2x minmax_element zijn.

yo/generic/examples/maxelement.cc
lijn 31 moet zijn
"The " << type << ". absolute int value is " <<

yo/generic/examples/minmax.cc
probleem met auto, dit geeft een pair<const int&, const int&> maar beide
referenties zijn weg na de expressie. 
Volgend programma geeft vreemde resultaten, als we beide auto keywords
vervangen door pair<int, int> is het probleem weg

        auto values = minmax(5, 2, less<int>{});
        //pair<const int&, const int&> otherpair = minmax(5, 2, less<int>{});
        auto otherpair = minmax(5, 2, less<int>{});
        cout << values.first << " is smaller than " << values.second << '\n';

section 19.1.43 : 3e prototype lijkt niet te bestaan volgens cppreference.com

section 19.1.45 : The text : The first predicate: must be The first prototype

yo/generic/examples/replace.cc
Line 45 uit commentaar halen, anders compileert het niet

section 19.1.51 : bij 1e function prototype is er een syntax probleem met de yo code

yo/generic/examples/transformreduce.cc
init van string met "\t" is eigenlijk niet nodig (lijn 47)

section 19.1.59 : De prototype definities unique_copy moeten weg. De volgende sectie
beschrijft deze
Strict genomen moet de sequence niet gesorteerd zijn, het is geen voorwaarde. 
(en geldt ook voor unique_copy)

yo/generic/examples/unique.cc
Daar de C++ standaard niets definieert omtrent de [result, last) sequence:
Each element of [result, last) has a valid but unspecified state
Vandaar dat de output van het programm niet meer overeenkomt met de commentaar
onderaan. 

------------------------------------------------

Hoofdstuk 20

sectie 20.1.2 : 
Bolletje 3 : uitleg suggereert dat lijn 58 compileert omdat de klasse een move constructor heeft. 
Maar de echte reden dat het compileert is dat de copy constructor bestaat. 
Als je die wegneemt compileert het niet meer, ook al heb je nog een move constructor

Bolletje 4 : Lijn 55 compileert niet omdat we geen move constructor hebben staat
in de text. Maar het compileert wel als er een copy constructor is. De move constructor
heeft hier niets mee te maken.

